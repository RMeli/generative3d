Bootstrap: docker
From: ubuntu:18.04

%files
    debs/libcudnn7_cuda10.2.deb /debs/
    debs/libcudnn7-dev_cuda10.2.deb /debs/
    ../../testfiles/1k22_lig.sdf /gnina-examples/lig.sdf
    ../../testfiles/1k22_rec.pdb /gnina-examples/rec.pdb

%environment
    export LC_ALL=C.UTF-8
    export PATH="${PATH}:/usr/local/cuda/bin"
    export LD_LIBRARY_PATH="/lib:/lib64:/usr/lib:/usr/local/lib:${LD_LIBRARY_PATH}"
    export PYTHONPATH="/usr/local/python"
    export RDBASE="/opt/rdkit"
%post
    # Useful env variable for building the image
    export ROOTDIR=/opt
    export DEBIAN_FRONTEND=noninteractive
    export GNINA_VERSION="v1.0.1"
    export LIBMOLGRID_VERSION="v0.2.1"

    # Env variables for execution
    export LC_ALL=C.UTF-8
    export PATH="${PATH}:/usr/local/cuda/bin"
    export LD_LIBRARY_PATH="/lib:/lib64:/usr/lib:/usr/local/lib:${LD_LIBRARY_PATH}"
    export PYTHONPATH="/usr/local/python"
    export RDBASE="${ROOTDIR}/rdkit"



    # Update distro
    echo "INFO:    Updating base image"
    apt update -y
    apt upgrade -y

    # Install requirements
    ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
    apt install -y wget gnupg software-properties-common tzdata git libboost-all-dev libeigen3-dev \
    libgoogle-glog-dev libprotobuf-dev protobuf-compiler libhdf5-dev libatlas-base-dev libsqlite3-dev sqlite3 python3-dev python3-pip \
    libfreetype6-dev swig apt-transport-https ca-certificates

    # Install the latest cmake version because gnina requires cmake >= 3.12 but Ubuntu 18.04 ships cmake 3.10.2
    echo "INFO:    Installing cmake 3.20"
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
    apt update
    apt install -y cmake build-essential


    # Install CUDA 10.2 (Last to support cuDNN v.7)
    echo "INFO:    Installing CUDA 10.2"
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
    mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
    apt update
    apt install -y cuda-minimal-build-10-2 libcublas-dev cuda-curand-dev-10-2
    update-alternatives --install /usr/local/cuda cuda /usr/local/cuda-10.2 1

    # Install cuDNN v.7
    echo "INFO:    Installing cuDNN 7"
    dpkg -i /debs/libcudnn7*

    # Make sure default python is python 3
    echo "INFO:    Updating alternatives for Python"
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    # Install Python dependencies
    # Note:
    #     pip is used to install system-wide. 
    #     This is not recommended in most cases because it will break package management by apt.
    #     But, since this install is meant to be contained (ie not updated), this is not an issue.
    echo "INFO:    Installing Python dependencies"
    pip install numpy pandas pytest scipy
    pip install torch torchvision torchaudio
    pip install GPUtil
    pip install seaborn scikit-image parse protobuf

    # Install version RDKit
    echo "INFO:    Installing RDKIT 2021_03_1"
    git clone -b Release_2021_03_1 --depth=1 https://github.com/rdkit/rdkit.git "${ROOTDIR}/rdkit"
    cd "${ROOTDIR}/rdkit"
    mkdir build
    cd build
    cmake -DRDK_BUILD_MAEPARSER_SUPPORT=OFF -DRDK_BUILD_COORDGEN_SUPPORT=OFF ..
    make -j $(nproc)
    make install
    cp $RDBASE/lib/libRDKit* /usr/local/lib/
    cp -r $RDBASE/lib/cmake/* /usr/local/lib/cmake/
    cp -r $RDBASE/rdkit /usr/local/lib/python3.6/dist-packages/

    # Install Openbabel
    echo "INFO:    Installing openbabel 3"
    git clone --depth=1 -b openbabel-3-1-1 https://github.com/openbabel/openbabel.git "${ROOTDIR}/openbabel"
    cd "${ROOTDIR}/openbabel"
    mkdir build
    cd build
    cmake -DWITH_MAEPARSER=OFF -DWITH_COORDGEN=OFF -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON ..
    make -j $(nproc)
    make install

    # Install libmolgrid
    echo "INFO:    Installing libmolgrid ${LIBMOLGRID_VERSION}"
    git clone --depth=1 -b "$LIBMOLGRID_VERSION" https://github.com/gnina/libmolgrid.git "${ROOTDIR}/libmolgrid"
    cd "${ROOTDIR}/libmolgrid"
    mkdir build
    cd build
    cmake ..
    make -j $(nproc)
    make install

    # Install gnina
    echo "INFO:    Installing gnina ${GNINA_VERSION}"
    git clone --depth=1 -b "${GNINA_VERSION}" https://github.com/gnina/gnina.git "${ROOTDIR}/gnina"
    cd "${ROOTDIR}/gnina"
    mkdir build
    cd build
    cmake -DBUILD_docs=OFF -DCUDA_ARCH_NAME=All ..
    make -j $(nproc)
    make install

    # Clean up
    echo "INFO:    Cleaning up skipped..."
    #rm -rf /opt/*

%test
    echo "Testing Python installation..."

    VERSION=$(python -c "import rdkit;print(rdkit.__version__)")
    if [ $? -eq 0 ]; then echo "RDKIT $VERSION is installed"; else echo "RDKIT installation FAILED"; exit 1; fi

    VERSION=$(python -c "import openbabel;print(openbabel.__version__)")
    if [ $? -eq 0 ]; then echo "Openbabel $VERSION is installed"; else echo "Openbabel installation FAILED"; exit 1; fi

    FILE=$(python -c "import molgrid;print(molgrid.__file__)")
    if [ $? -eq 0 ]; then echo "molgrid is installed"; else echo "molgrid installation FAILED"; exit 1; fi

    VERSION=$(python -c "import caffe;print(caffe.__version__)")
    if [ $? -eq 0 ]; then echo "Caffe $VERSION is installed"; else echo "Caffe installation FAILED"; exit 1; fi

    echo "Python installation is OK"

    echo ""
    echo "Testing GNINA execution..."
    
    gnina -r /gnina-examples/rec.pdb -l /gnina-examples/lig.sdf --autobox_ligand /gnina-examples/lig.sdf --seed 2 --num_modes=5 --no_gpu --cnn crossdock_default2018 \
    | grep "1      -10.03       0.9903      7.446"

    if [ $? -eq 0 ]; then echo "GNINA execution is OK"; else echo "GNINA execution FAILED"; exit 1; fi

####
# Gnina App
####

%apprun gnina
    echo "Running gnina with the following parameters: $*"
    exec gnina "$@"

%apphelp gnina
    Run gnina

####
# Python App
####

%apprun python
    echo "Running python with the following parameters: $*"
    exec python "$@"

%apphelp python
    Run Python
